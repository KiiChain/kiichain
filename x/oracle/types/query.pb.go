// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oracle/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryExchangeRateRequest is the request for the Query/ExchangeRate rpc method
type QueryExchangeRateRequest struct {
	// denom defines the exchange rate denom to search
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryExchangeRateRequest) Reset()         { *m = QueryExchangeRateRequest{} }
func (m *QueryExchangeRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRateRequest) ProtoMessage()    {}
func (*QueryExchangeRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{0}
}
func (m *QueryExchangeRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRateRequest.Merge(m, src)
}
func (m *QueryExchangeRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRateRequest proto.InternalMessageInfo

// QueryExchangeRateResponse is the response for the Query/ExchangeRate rpc method
type QueryExchangeRateResponse struct {
	OracleExchangeRate *OracleExchangeRate `protobuf:"bytes,1,opt,name=oracle_exchange_rate,json=oracleExchangeRate,proto3" json:"oracle_exchange_rate,omitempty"`
}

func (m *QueryExchangeRateResponse) Reset()         { *m = QueryExchangeRateResponse{} }
func (m *QueryExchangeRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRateResponse) ProtoMessage()    {}
func (*QueryExchangeRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{1}
}
func (m *QueryExchangeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRateResponse.Merge(m, src)
}
func (m *QueryExchangeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRateResponse proto.InternalMessageInfo

// QueryExchangeRatesRequest is the response for the Query/ExchangeRates rpc method
type QueryExchangeRatesRequest struct {
}

func (m *QueryExchangeRatesRequest) Reset()         { *m = QueryExchangeRatesRequest{} }
func (m *QueryExchangeRatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRatesRequest) ProtoMessage()    {}
func (*QueryExchangeRatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{2}
}
func (m *QueryExchangeRatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRatesRequest.Merge(m, src)
}
func (m *QueryExchangeRatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRatesRequest proto.InternalMessageInfo

// QueryExchangeRatesResponse is the response for the Query/ExchangeRatess rpc method
// DenomOracleExchangeRatePairs is the alias of the element denom_oracle_exchange_rate after generating the code
type QueryExchangeRatesResponse struct {
	DenomOracleExchangeRate DenomOracleExchangeRatePairs `protobuf:"bytes,1,rep,name=denom_oracle_exchange_rate,json=denomOracleExchangeRate,proto3,castrepeated=DenomOracleExchangeRatePairs" json:"denom_oracle_exchange_rate"`
}

func (m *QueryExchangeRatesResponse) Reset()         { *m = QueryExchangeRatesResponse{} }
func (m *QueryExchangeRatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRatesResponse) ProtoMessage()    {}
func (*QueryExchangeRatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{3}
}
func (m *QueryExchangeRatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRatesResponse.Merge(m, src)
}
func (m *QueryExchangeRatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRatesResponse proto.InternalMessageInfo

// QueryActivesResponse is the request for the Query/Actives rpc method
type QueryActivesRequest struct {
}

func (m *QueryActivesRequest) Reset()         { *m = QueryActivesRequest{} }
func (m *QueryActivesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryActivesRequest) ProtoMessage()    {}
func (*QueryActivesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{4}
}
func (m *QueryActivesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActivesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActivesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActivesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActivesRequest.Merge(m, src)
}
func (m *QueryActivesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActivesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActivesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActivesRequest proto.InternalMessageInfo

// QueryActivesResponse is the response for the Query/Actives rpc method
type QueryActivesResponse struct {
	Actives []string `protobuf:"bytes,1,rep,name=actives,proto3" json:"actives,omitempty"`
}

func (m *QueryActivesResponse) Reset()         { *m = QueryActivesResponse{} }
func (m *QueryActivesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActivesResponse) ProtoMessage()    {}
func (*QueryActivesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{5}
}
func (m *QueryActivesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActivesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActivesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActivesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActivesResponse.Merge(m, src)
}
func (m *QueryActivesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActivesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActivesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActivesResponse proto.InternalMessageInfo

func (m *QueryActivesResponse) GetActives() []string {
	if m != nil {
		return m.Actives
	}
	return nil
}

// DenomOracleExchangeRate is the data type that represents an set of denom - exchange rate values
type DenomOracleExchangeRate struct {
	Denom              string              `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	OracleExchangeRate *OracleExchangeRate `protobuf:"bytes,2,opt,name=oracle_exchange_rate,json=oracleExchangeRate,proto3" json:"oracle_exchange_rate,omitempty"`
}

func (m *DenomOracleExchangeRate) Reset()         { *m = DenomOracleExchangeRate{} }
func (m *DenomOracleExchangeRate) String() string { return proto.CompactTextString(m) }
func (*DenomOracleExchangeRate) ProtoMessage()    {}
func (*DenomOracleExchangeRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{6}
}
func (m *DenomOracleExchangeRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomOracleExchangeRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomOracleExchangeRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomOracleExchangeRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomOracleExchangeRate.Merge(m, src)
}
func (m *DenomOracleExchangeRate) XXX_Size() int {
	return m.Size()
}
func (m *DenomOracleExchangeRate) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomOracleExchangeRate.DiscardUnknown(m)
}

var xxx_messageInfo_DenomOracleExchangeRate proto.InternalMessageInfo

func (m *DenomOracleExchangeRate) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *DenomOracleExchangeRate) GetOracleExchangeRate() *OracleExchangeRate {
	if m != nil {
		return m.OracleExchangeRate
	}
	return nil
}

// QueryVoteTargetsRequest is the request for the Query/VoteTargets rpc method
type QueryVoteTargetsRequest struct {
}

func (m *QueryVoteTargetsRequest) Reset()         { *m = QueryVoteTargetsRequest{} }
func (m *QueryVoteTargetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVoteTargetsRequest) ProtoMessage()    {}
func (*QueryVoteTargetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{7}
}
func (m *QueryVoteTargetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoteTargetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoteTargetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoteTargetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoteTargetsRequest.Merge(m, src)
}
func (m *QueryVoteTargetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoteTargetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoteTargetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoteTargetsRequest proto.InternalMessageInfo

// QueryVoteTargetsRequest is the response for the Query/VoteTargets rpc method
type QueryVoteTargetsResponse struct {
	VoteTargets []string `protobuf:"bytes,1,rep,name=vote_targets,json=voteTargets,proto3" json:"vote_targets,omitempty"`
}

func (m *QueryVoteTargetsResponse) Reset()         { *m = QueryVoteTargetsResponse{} }
func (m *QueryVoteTargetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVoteTargetsResponse) ProtoMessage()    {}
func (*QueryVoteTargetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{8}
}
func (m *QueryVoteTargetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoteTargetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoteTargetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoteTargetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoteTargetsResponse.Merge(m, src)
}
func (m *QueryVoteTargetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoteTargetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoteTargetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoteTargetsResponse proto.InternalMessageInfo

func (m *QueryVoteTargetsResponse) GetVoteTargets() []string {
	if m != nil {
		return m.VoteTargets
	}
	return nil
}

// QueryPriceSnapshotHistoryRequest is the request for the Query/PriceSnapshotHistory rpc method
type QueryPriceSnapshotHistoryRequest struct {
}

func (m *QueryPriceSnapshotHistoryRequest) Reset()         { *m = QueryPriceSnapshotHistoryRequest{} }
func (m *QueryPriceSnapshotHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPriceSnapshotHistoryRequest) ProtoMessage()    {}
func (*QueryPriceSnapshotHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{9}
}
func (m *QueryPriceSnapshotHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPriceSnapshotHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPriceSnapshotHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPriceSnapshotHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPriceSnapshotHistoryRequest.Merge(m, src)
}
func (m *QueryPriceSnapshotHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPriceSnapshotHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPriceSnapshotHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPriceSnapshotHistoryRequest proto.InternalMessageInfo

// QueryPriceSnapshotHistoryResponse is the response for the Query/PriceSnapshotHistory rpc method
// PriceSnapshots is the alias of the price_snapshot element
type QueryPriceSnapshotHistoryResponse struct {
	PriceSnapshot PriceSnapshots `protobuf:"bytes,1,rep,name=price_snapshot,json=priceSnapshot,proto3,castrepeated=PriceSnapshots" json:"price_snapshot"`
}

func (m *QueryPriceSnapshotHistoryResponse) Reset()         { *m = QueryPriceSnapshotHistoryResponse{} }
func (m *QueryPriceSnapshotHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPriceSnapshotHistoryResponse) ProtoMessage()    {}
func (*QueryPriceSnapshotHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{10}
}
func (m *QueryPriceSnapshotHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPriceSnapshotHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPriceSnapshotHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPriceSnapshotHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPriceSnapshotHistoryResponse.Merge(m, src)
}
func (m *QueryPriceSnapshotHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPriceSnapshotHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPriceSnapshotHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPriceSnapshotHistoryResponse proto.InternalMessageInfo

func (m *QueryPriceSnapshotHistoryResponse) GetPriceSnapshot() PriceSnapshots {
	if m != nil {
		return m.PriceSnapshot
	}
	return nil
}

// QueryTwapsRequest is the request for the Query/Twaps rpc method
type QueryTwapsRequest struct {
	// time to lookback on the snapshots array
	LookbackSeconds uint64 `protobuf:"varint,1,opt,name=lookback_seconds,json=lookbackSeconds,proto3" json:"lookback_seconds,omitempty"`
}

func (m *QueryTwapsRequest) Reset()         { *m = QueryTwapsRequest{} }
func (m *QueryTwapsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTwapsRequest) ProtoMessage()    {}
func (*QueryTwapsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{11}
}
func (m *QueryTwapsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTwapsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTwapsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTwapsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTwapsRequest.Merge(m, src)
}
func (m *QueryTwapsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTwapsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTwapsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTwapsRequest proto.InternalMessageInfo

func (m *QueryTwapsRequest) GetLookbackSeconds() uint64 {
	if m != nil {
		return m.LookbackSeconds
	}
	return 0
}

// QueryTwapsRequest is the response for the Query/Twaps rpc method
// OracleTwaps is the alias of the oracle_twap array element
type QueryTwapsResponse struct {
	// Twap = Time-weighted average price
	// oracle_twap is the average price over an specific period of time and denom
	OracleTwap OracleTwaps `protobuf:"bytes,1,rep,name=oracle_twap,json=oracleTwap,proto3,castrepeated=OracleTwaps" json:"oracle_twap"`
}

func (m *QueryTwapsResponse) Reset()         { *m = QueryTwapsResponse{} }
func (m *QueryTwapsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTwapsResponse) ProtoMessage()    {}
func (*QueryTwapsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{12}
}
func (m *QueryTwapsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTwapsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTwapsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTwapsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTwapsResponse.Merge(m, src)
}
func (m *QueryTwapsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTwapsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTwapsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTwapsResponse proto.InternalMessageInfo

func (m *QueryTwapsResponse) GetOracleTwap() OracleTwaps {
	if m != nil {
		return m.OracleTwap
	}
	return nil
}

// QueryFeederDelegationResponse is the request for the Query/FeederDelegation rpc method
type QueryFeederDelegationRequest struct {
	// validator address to query for
	ValidatorAddr string `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
}

func (m *QueryFeederDelegationRequest) Reset()         { *m = QueryFeederDelegationRequest{} }
func (m *QueryFeederDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeederDelegationRequest) ProtoMessage()    {}
func (*QueryFeederDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{13}
}
func (m *QueryFeederDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeederDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeederDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeederDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeederDelegationRequest.Merge(m, src)
}
func (m *QueryFeederDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeederDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeederDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeederDelegationRequest proto.InternalMessageInfo

// QueryFeederDelegationResponse is the response for the Query/FeederDelegation rpc method
type QueryFeederDelegationResponse struct {
	// delegated address
	FeedAddr string `protobuf:"bytes,1,opt,name=feed_addr,json=feedAddr,proto3" json:"feed_addr,omitempty"`
}

func (m *QueryFeederDelegationResponse) Reset()         { *m = QueryFeederDelegationResponse{} }
func (m *QueryFeederDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeederDelegationResponse) ProtoMessage()    {}
func (*QueryFeederDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{14}
}
func (m *QueryFeederDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeederDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeederDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeederDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeederDelegationResponse.Merge(m, src)
}
func (m *QueryFeederDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeederDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeederDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeederDelegationResponse proto.InternalMessageInfo

func (m *QueryFeederDelegationResponse) GetFeedAddr() string {
	if m != nil {
		return m.FeedAddr
	}
	return ""
}

// QueryVotePenaltyCounterRequest is the request for the Query/VotePenaltyCounter rpc
type QueryVotePenaltyCounterRequest struct {
	ValidatorAddr string `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
}

func (m *QueryVotePenaltyCounterRequest) Reset()         { *m = QueryVotePenaltyCounterRequest{} }
func (m *QueryVotePenaltyCounterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVotePenaltyCounterRequest) ProtoMessage()    {}
func (*QueryVotePenaltyCounterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{15}
}
func (m *QueryVotePenaltyCounterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVotePenaltyCounterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVotePenaltyCounterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVotePenaltyCounterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVotePenaltyCounterRequest.Merge(m, src)
}
func (m *QueryVotePenaltyCounterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVotePenaltyCounterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVotePenaltyCounterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVotePenaltyCounterRequest proto.InternalMessageInfo

// QueryVotePenaltyCounterResponse is the response for the Query/VotePenaltyCounter rpc
type QueryVotePenaltyCounterResponse struct {
	// Returns the voting behavior per validator
	VotePenaltyCounter *VotePenaltyCounter `protobuf:"bytes,1,opt,name=vote_penalty_counter,json=votePenaltyCounter,proto3" json:"vote_penalty_counter,omitempty"`
}

func (m *QueryVotePenaltyCounterResponse) Reset()         { *m = QueryVotePenaltyCounterResponse{} }
func (m *QueryVotePenaltyCounterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVotePenaltyCounterResponse) ProtoMessage()    {}
func (*QueryVotePenaltyCounterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{16}
}
func (m *QueryVotePenaltyCounterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVotePenaltyCounterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVotePenaltyCounterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVotePenaltyCounterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVotePenaltyCounterResponse.Merge(m, src)
}
func (m *QueryVotePenaltyCounterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVotePenaltyCounterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVotePenaltyCounterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVotePenaltyCounterResponse proto.InternalMessageInfo

func (m *QueryVotePenaltyCounterResponse) GetVotePenaltyCounter() *VotePenaltyCounter {
	if m != nil {
		return m.VotePenaltyCounter
	}
	return nil
}

// QuerySlashWindowRequest is the request for the Query/SlashWindow rpc
type QuerySlashWindowRequest struct {
}

func (m *QuerySlashWindowRequest) Reset()         { *m = QuerySlashWindowRequest{} }
func (m *QuerySlashWindowRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySlashWindowRequest) ProtoMessage()    {}
func (*QuerySlashWindowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{17}
}
func (m *QuerySlashWindowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySlashWindowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySlashWindowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySlashWindowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySlashWindowRequest.Merge(m, src)
}
func (m *QuerySlashWindowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySlashWindowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySlashWindowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySlashWindowRequest proto.InternalMessageInfo

// QuerySlashWindowResponse is the response for the Query/SlashWindow rpc
type QuerySlashWindowResponse struct {
	// window_progress defines the number of voting periods
	WindowProgress uint64 `protobuf:"varint,1,opt,name=window_progress,json=windowProgress,proto3" json:"window_progress,omitempty"`
}

func (m *QuerySlashWindowResponse) Reset()         { *m = QuerySlashWindowResponse{} }
func (m *QuerySlashWindowResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySlashWindowResponse) ProtoMessage()    {}
func (*QuerySlashWindowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{18}
}
func (m *QuerySlashWindowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySlashWindowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySlashWindowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySlashWindowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySlashWindowResponse.Merge(m, src)
}
func (m *QuerySlashWindowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySlashWindowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySlashWindowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySlashWindowResponse proto.InternalMessageInfo

func (m *QuerySlashWindowResponse) GetWindowProgress() uint64 {
	if m != nil {
		return m.WindowProgress
	}
	return 0
}

// QueryParamsResponse is the request for the Query/Params rpc method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{19}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response for the Query/Params rpc method
type QueryParamsResponse struct {
	// return the params module's params
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{20}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryExchangeRateRequest)(nil), "kiichain.kiichain3.oracle.QueryExchangeRateRequest")
	proto.RegisterType((*QueryExchangeRateResponse)(nil), "kiichain.kiichain3.oracle.QueryExchangeRateResponse")
	proto.RegisterType((*QueryExchangeRatesRequest)(nil), "kiichain.kiichain3.oracle.QueryExchangeRatesRequest")
	proto.RegisterType((*QueryExchangeRatesResponse)(nil), "kiichain.kiichain3.oracle.QueryExchangeRatesResponse")
	proto.RegisterType((*QueryActivesRequest)(nil), "kiichain.kiichain3.oracle.QueryActivesRequest")
	proto.RegisterType((*QueryActivesResponse)(nil), "kiichain.kiichain3.oracle.QueryActivesResponse")
	proto.RegisterType((*DenomOracleExchangeRate)(nil), "kiichain.kiichain3.oracle.DenomOracleExchangeRate")
	proto.RegisterType((*QueryVoteTargetsRequest)(nil), "kiichain.kiichain3.oracle.QueryVoteTargetsRequest")
	proto.RegisterType((*QueryVoteTargetsResponse)(nil), "kiichain.kiichain3.oracle.QueryVoteTargetsResponse")
	proto.RegisterType((*QueryPriceSnapshotHistoryRequest)(nil), "kiichain.kiichain3.oracle.QueryPriceSnapshotHistoryRequest")
	proto.RegisterType((*QueryPriceSnapshotHistoryResponse)(nil), "kiichain.kiichain3.oracle.QueryPriceSnapshotHistoryResponse")
	proto.RegisterType((*QueryTwapsRequest)(nil), "kiichain.kiichain3.oracle.QueryTwapsRequest")
	proto.RegisterType((*QueryTwapsResponse)(nil), "kiichain.kiichain3.oracle.QueryTwapsResponse")
	proto.RegisterType((*QueryFeederDelegationRequest)(nil), "kiichain.kiichain3.oracle.QueryFeederDelegationRequest")
	proto.RegisterType((*QueryFeederDelegationResponse)(nil), "kiichain.kiichain3.oracle.QueryFeederDelegationResponse")
	proto.RegisterType((*QueryVotePenaltyCounterRequest)(nil), "kiichain.kiichain3.oracle.QueryVotePenaltyCounterRequest")
	proto.RegisterType((*QueryVotePenaltyCounterResponse)(nil), "kiichain.kiichain3.oracle.QueryVotePenaltyCounterResponse")
	proto.RegisterType((*QuerySlashWindowRequest)(nil), "kiichain.kiichain3.oracle.QuerySlashWindowRequest")
	proto.RegisterType((*QuerySlashWindowResponse)(nil), "kiichain.kiichain3.oracle.QuerySlashWindowResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "kiichain.kiichain3.oracle.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "kiichain.kiichain3.oracle.QueryParamsResponse")
}

func init() { proto.RegisterFile("oracle/query.proto", fileDescriptor_562b782cb9ac197e) }

var fileDescriptor_562b782cb9ac197e = []byte{
	// 1092 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0x94, 0x26, 0x6d, 0x9e, 0x9b, 0xb4, 0x4c, 0x0c, 0x49, 0xb6, 0xa9, 0xdd, 0xac, 0x9a,
	0x36, 0x48, 0x89, 0x37, 0x72, 0x08, 0xb4, 0x69, 0x41, 0x4a, 0x52, 0x2a, 0x38, 0xd5, 0x75, 0x2a,
	0x90, 0xe0, 0xb0, 0x9a, 0x78, 0xa7, 0xf6, 0x2a, 0xce, 0xce, 0x66, 0x67, 0x93, 0x34, 0x8a, 0x72,
	0xe9, 0xa9, 0x87, 0x1e, 0x90, 0x2a, 0xb8, 0x81, 0x7a, 0xe0, 0x84, 0x38, 0xf0, 0x17, 0x70, 0xe0,
	0x14, 0x6e, 0x95, 0x90, 0x10, 0x07, 0x54, 0x50, 0xc2, 0x81, 0x3f, 0x03, 0x79, 0xf6, 0xad, 0xb3,
	0x5b, 0xef, 0xfa, 0x47, 0xd4, 0x93, 0x77, 0xdf, 0xcf, 0xef, 0xdb, 0x79, 0xf3, 0x3e, 0x19, 0xa8,
	0xf0, 0x58, 0xb5, 0xc1, 0x8d, 0xad, 0x6d, 0xee, 0xed, 0x15, 0x5d, 0x4f, 0xf8, 0x82, 0x4e, 0x6c,
	0xd8, 0x76, 0xb5, 0xce, 0x6c, 0xa7, 0x18, 0x3e, 0x2c, 0x14, 0x83, 0x30, 0x2d, 0x57, 0x13, 0x35,
	0xa1, 0xa2, 0x8c, 0xe6, 0x53, 0x90, 0xa0, 0x4d, 0xd6, 0x84, 0xa8, 0x35, 0xb8, 0xc1, 0x5c, 0xdb,
	0x60, 0x8e, 0x23, 0x7c, 0xe6, 0xdb, 0xc2, 0x91, 0xe8, 0x1d, 0xc5, 0x16, 0x2e, 0xf3, 0xd8, 0x26,
	0x1a, 0xf5, 0x25, 0x18, 0x7f, 0xd0, 0x6c, 0xf9, 0xc9, 0xe3, 0x6a, 0x9d, 0x39, 0x35, 0x5e, 0x61,
	0x3e, 0xaf, 0xf0, 0xad, 0x6d, 0x2e, 0x7d, 0x9a, 0x83, 0x01, 0x8b, 0x3b, 0x62, 0x73, 0x9c, 0x5c,
	0x25, 0x33, 0x43, 0x95, 0xe0, 0x65, 0xe9, 0xfc, 0xd3, 0x17, 0x85, 0xcc, 0x7f, 0x2f, 0x0a, 0x19,
	0xfd, 0x19, 0x81, 0x89, 0x84, 0x64, 0xe9, 0x0a, 0x47, 0x72, 0xca, 0x21, 0x17, 0x34, 0x34, 0x39,
	0xba, 0x4d, 0x8f, 0xf9, 0x5c, 0x15, 0xcb, 0x96, 0xe6, 0x8a, 0xa9, 0xe4, 0x8a, 0xf7, 0xd5, 0x4f,
	0xb4, 0xe8, 0xca, 0xd9, 0xc3, 0x57, 0x05, 0x52, 0xc1, 0x8f, 0x14, 0xf5, 0x44, 0xe0, 0x5c, 0x4e,
	0x40, 0x23, 0x91, 0x8b, 0xfe, 0x0b, 0x01, 0x2d, 0xc9, 0x8b, 0x60, 0xbf, 0x21, 0xa0, 0x29, 0x7a,
	0x66, 0x0a, 0xe6, 0xb7, 0x66, 0xb2, 0xa5, 0x52, 0x07, 0xcc, 0x77, 0x9b, 0xc9, 0x09, 0xc0, 0xaf,
	0x1d, 0xbe, 0x2a, 0x64, 0x7e, 0xfc, 0xbb, 0x30, 0x99, 0x12, 0x50, 0x66, 0xb6, 0x27, 0x2b, 0x63,
	0x56, 0xb2, 0x37, 0xc2, 0xee, 0x1d, 0x18, 0x55, 0xf8, 0x97, 0xab, 0xbe, 0xbd, 0x73, 0xc2, 0x6b,
	0x1e, 0x72, 0x71, 0x33, 0x12, 0x1a, 0x87, 0x73, 0x2c, 0x30, 0x29, 0xf0, 0x43, 0x95, 0xf0, 0x55,
	0xff, 0x96, 0xc0, 0x58, 0x0a, 0x98, 0xe4, 0x13, 0x4f, 0x3d, 0xc9, 0x33, 0x6f, 0xf4, 0x24, 0xf5,
	0x09, 0x18, 0x53, 0x54, 0x3e, 0x17, 0x3e, 0x7f, 0xc8, 0xbc, 0x1a, 0xf7, 0x5b, 0x2c, 0x3f, 0xc2,
	0x29, 0x8d, 0xb9, 0x90, 0xe9, 0x14, 0x5c, 0xd8, 0x11, 0x3e, 0x37, 0xfd, 0xc0, 0x8e, 0x74, 0xb3,
	0x3b, 0x27, 0xa1, 0xba, 0x0e, 0x57, 0x55, 0x7a, 0xd9, 0xb3, 0xab, 0x7c, 0xcd, 0x61, 0xae, 0xac,
	0x0b, 0xff, 0x53, 0x5b, 0xfa, 0xc2, 0xdb, 0x0b, 0x5b, 0x3c, 0x23, 0x30, 0xd5, 0x21, 0x08, 0x9b,
	0xd5, 0x60, 0xc4, 0x6d, 0xfa, 0x4d, 0x89, 0x01, 0x38, 0x1a, 0x33, 0x1d, 0x3e, 0x42, 0xac, 0xe0,
	0xca, 0xbb, 0x38, 0x10, 0x23, 0x31, 0xb3, 0xac, 0x0c, 0xbb, 0xd1, 0x77, 0xfd, 0x63, 0x78, 0x5b,
	0xa1, 0x79, 0xb8, 0xcb, 0xdc, 0xf0, 0x33, 0xd0, 0xf7, 0xe0, 0x52, 0x43, 0x88, 0x8d, 0x75, 0x56,
	0xdd, 0x30, 0x25, 0xaf, 0x0a, 0xc7, 0x92, 0xea, 0xa4, 0xce, 0x56, 0x2e, 0x86, 0xf6, 0xb5, 0xc0,
	0xac, 0x6f, 0x01, 0x8d, 0xe6, 0x23, 0xfc, 0xaf, 0x20, 0x8b, 0x27, 0xe9, 0xef, 0x32, 0x17, 0xb1,
	0x4f, 0x77, 0x3d, 0xc0, 0x66, 0x91, 0x95, 0x51, 0x04, 0x9e, 0x3d, 0xb1, 0xc9, 0x0a, 0x88, 0xd6,
	0x8b, 0x7e, 0x1f, 0x26, 0x55, 0xcb, 0x7b, 0x9c, 0x5b, 0xdc, 0xbb, 0xcb, 0x1b, 0xbc, 0xa6, 0xf6,
	0x4f, 0x88, 0x7e, 0x1a, 0x46, 0x76, 0x58, 0xc3, 0xb6, 0x98, 0x2f, 0x3c, 0x93, 0x59, 0x96, 0x87,
	0x53, 0x36, 0xdc, 0xb2, 0x2e, 0x5b, 0x96, 0x17, 0x19, 0xf9, 0x3b, 0x70, 0x25, 0xa5, 0x20, 0xd2,
	0xb9, 0x0c, 0x43, 0x8f, 0x38, 0xb7, 0xa2, 0xc5, 0xce, 0x37, 0x0d, 0xcd, 0x3a, 0xfa, 0x03, 0xc8,
	0xb7, 0x66, 0xa6, 0xcc, 0x1d, 0xd6, 0xf0, 0xf7, 0x56, 0xc5, 0xb6, 0xe3, 0x73, 0xef, 0xd4, 0x80,
	0x9e, 0x10, 0x28, 0xa4, 0xd6, 0x44, 0x4c, 0x26, 0xe4, 0xd4, 0x38, 0xba, 0x81, 0xdb, 0xac, 0x06,
	0xfe, 0x1e, 0xd6, 0x5e, 0x42, 0x51, 0xba, 0xd3, 0x66, 0x6b, 0x5d, 0x93, 0xb5, 0x06, 0x93, 0xf5,
	0x2f, 0x6c, 0xc7, 0x12, 0xbb, 0xe1, 0x0c, 0xaf, 0xe2, 0x35, 0x89, 0xb9, 0x10, 0xd7, 0x0d, 0xb8,
	0xb8, 0xab, 0x2c, 0xa6, 0xeb, 0x89, 0x9a, 0xc7, 0x65, 0x38, 0x3a, 0x23, 0x81, 0xb9, 0x8c, 0x56,
	0x3d, 0x87, 0x93, 0x53, 0x56, 0x32, 0x11, 0x96, 0x2e, 0xe3, 0xfa, 0x09, 0xad, 0x58, 0xf5, 0x16,
	0x0c, 0x06, 0x72, 0x82, 0xfc, 0xa6, 0x3a, 0xdd, 0x83, 0x20, 0x15, 0x13, 0x4a, 0x7f, 0x0d, 0xc3,
	0x80, 0x2a, 0x49, 0x7f, 0x26, 0x70, 0x21, 0xb6, 0x86, 0x16, 0x3a, 0x54, 0x49, 0x53, 0x2b, 0xed,
	0xfd, 0xfe, 0x92, 0x02, 0x02, 0xfa, 0xe2, 0x93, 0xdf, 0xff, 0x7d, 0x7e, 0xc6, 0xa0, 0x73, 0x46,
	0x98, 0x64, 0xa0, 0x4c, 0xaa, 0xdd, 0x27, 0x8d, 0x7d, 0xf5, 0x7b, 0x60, 0xc4, 0x56, 0x1f, 0xfd,
	0x89, 0xc0, 0x70, 0x4c, 0x49, 0x68, 0x5f, 0xed, 0xc3, 0xcf, 0xaa, 0x2d, 0xf6, 0x99, 0x85, 0xa8,
	0x8b, 0x0a, 0xf5, 0x0c, 0xbd, 0x9e, 0x86, 0x3a, 0x86, 0x56, 0xd2, 0xe7, 0x04, 0xce, 0xa1, 0x42,
	0xd0, 0x62, 0xb7, 0x96, 0x71, 0x85, 0xd1, 0x8c, 0x9e, 0xe3, 0x11, 0xdc, 0x0d, 0x05, 0x6e, 0x8a,
	0x16, 0xd2, 0xc0, 0xa1, 0x12, 0xd1, 0x1f, 0x08, 0x64, 0x23, 0x1b, 0x9d, 0x96, 0xba, 0x75, 0x6a,
	0x57, 0x06, 0x6d, 0xa1, 0xaf, 0x1c, 0x44, 0x38, 0xab, 0x10, 0x5e, 0xa7, 0xd7, 0xd2, 0x10, 0x46,
	0x05, 0x85, 0xfe, 0x46, 0x20, 0x97, 0x24, 0x0a, 0xf4, 0x76, 0xb7, 0xde, 0x1d, 0xf4, 0x46, 0xbb,
	0x73, 0xba, 0x64, 0x64, 0xf0, 0x81, 0x62, 0x30, 0x4f, 0x8b, 0x69, 0x0c, 0xe2, 0x2a, 0x65, 0xd6,
	0x11, 0xf2, 0xf7, 0x04, 0x06, 0xd4, 0xe6, 0xa6, 0xb3, 0xdd, 0xfa, 0x47, 0x95, 0x47, 0x9b, 0xeb,
	0x31, 0x1a, 0xe1, 0xdd, 0x54, 0xf0, 0x4a, 0x74, 0x3e, 0x0d, 0x5e, 0x53, 0x7e, 0xa4, 0xb1, 0xff,
	0xba, 0x9a, 0x1d, 0xd0, 0x5f, 0x09, 0x5c, 0x7a, 0x7d, 0xdf, 0xd3, 0x0f, 0xbb, 0x75, 0x4f, 0x91,
	0x1c, 0xed, 0x66, 0xff, 0x89, 0xc8, 0xe0, 0xb6, 0x62, 0xb0, 0x48, 0x17, 0xda, 0x18, 0xb4, 0xc4,
	0x41, 0x1a, 0xfb, 0x71, 0xf9, 0x38, 0x30, 0x1e, 0xa9, 0x72, 0xf4, 0x0f, 0x02, 0xb4, 0x7d, 0x9b,
	0xd3, 0x5b, 0xbd, 0xcc, 0x6a, 0xa2, 0x54, 0x69, 0x4b, 0xa7, 0x49, 0x45, 0x2a, 0x9f, 0x29, 0x2a,
	0xab, 0x74, 0xb9, 0x2f, 0x2a, 0x49, 0x22, 0x46, 0xbf, 0x23, 0x90, 0x8d, 0x88, 0x4b, 0xf7, 0x1b,
	0xdb, 0x2e, 0x52, 0xdd, 0x6f, 0x6c, 0x82, 0x7a, 0xe9, 0xd3, 0x8a, 0x43, 0x81, 0x5e, 0x69, 0xe3,
	0x20, 0x9b, 0xd1, 0x66, 0xa0, 0x61, 0xf4, 0x29, 0x81, 0xc1, 0x40, 0x66, 0x68, 0xd7, 0x89, 0x8d,
	0xe9, 0x9b, 0x56, 0xec, 0x35, 0x1c, 0x01, 0x15, 0x14, 0xa0, 0x09, 0x3a, 0xd6, 0x06, 0x28, 0x90,
	0xb7, 0x95, 0x7b, 0x87, 0x47, 0x79, 0xf2, 0xf2, 0x28, 0x4f, 0xfe, 0x39, 0xca, 0x93, 0xaf, 0x8f,
	0xf3, 0x99, 0x97, 0xc7, 0xf9, 0xcc, 0x9f, 0xc7, 0xf9, 0xcc, 0x97, 0xb3, 0x35, 0xdb, 0xaf, 0x6f,
	0xaf, 0x17, 0xab, 0x62, 0xf3, 0x24, 0xb9, 0xd5, 0xd4, 0x78, 0x1c, 0x16, 0xf2, 0xf7, 0x5c, 0x2e,
	0xd7, 0x07, 0xd5, 0xff, 0xb4, 0x85, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x27, 0xd2, 0x49, 0xc8,
	0x21, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ExchangeRate returns exchange rate of a specific denom
	ExchangeRate(ctx context.Context, in *QueryExchangeRateRequest, opts ...grpc.CallOption) (*QueryExchangeRateResponse, error)
	// ExchangeRates returns the exchange rate for all denoms
	ExchangeRates(ctx context.Context, in *QueryExchangeRatesRequest, opts ...grpc.CallOption) (*QueryExchangeRatesResponse, error)
	// Actives returns all actives denoms on the module's KVStore
	Actives(ctx context.Context, in *QueryActivesRequest, opts ...grpc.CallOption) (*QueryActivesResponse, error)
	// VoteTargets returns all vote targets denoms
	VoteTargets(ctx context.Context, in *QueryVoteTargetsRequest, opts ...grpc.CallOption) (*QueryVoteTargetsResponse, error)
	// PriceSnapshotHistory returns the history of price snapshots for all assets
	PriceSnapshotHistory(ctx context.Context, in *QueryPriceSnapshotHistoryRequest, opts ...grpc.CallOption) (*QueryPriceSnapshotHistoryResponse, error)
	// Twap = Time-weighted average price
	// Twaps returns the list of the average price over an specific period of time and denom
	Twaps(ctx context.Context, in *QueryTwapsRequest, opts ...grpc.CallOption) (*QueryTwapsResponse, error)
	// FeederDelegation returns the delegator by the validator address
	FeederDelegation(ctx context.Context, in *QueryFeederDelegationRequest, opts ...grpc.CallOption) (*QueryFeederDelegationResponse, error)
	// VotePenaltyCounter returns the voting behavior by an specific validator
	VotePenaltyCounter(ctx context.Context, in *QueryVotePenaltyCounterRequest, opts ...grpc.CallOption) (*QueryVotePenaltyCounterResponse, error)
	// SlashWindow returns slash window informacion
	SlashWindow(ctx context.Context, in *QuerySlashWindowRequest, opts ...grpc.CallOption) (*QuerySlashWindowResponse, error)
	// Params returns the Oracle module's params
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ExchangeRate(ctx context.Context, in *QueryExchangeRateRequest, opts ...grpc.CallOption) (*QueryExchangeRateResponse, error) {
	out := new(QueryExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/kiichain.kiichain3.oracle.Query/ExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExchangeRates(ctx context.Context, in *QueryExchangeRatesRequest, opts ...grpc.CallOption) (*QueryExchangeRatesResponse, error) {
	out := new(QueryExchangeRatesResponse)
	err := c.cc.Invoke(ctx, "/kiichain.kiichain3.oracle.Query/ExchangeRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Actives(ctx context.Context, in *QueryActivesRequest, opts ...grpc.CallOption) (*QueryActivesResponse, error) {
	out := new(QueryActivesResponse)
	err := c.cc.Invoke(ctx, "/kiichain.kiichain3.oracle.Query/Actives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteTargets(ctx context.Context, in *QueryVoteTargetsRequest, opts ...grpc.CallOption) (*QueryVoteTargetsResponse, error) {
	out := new(QueryVoteTargetsResponse)
	err := c.cc.Invoke(ctx, "/kiichain.kiichain3.oracle.Query/VoteTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceSnapshotHistory(ctx context.Context, in *QueryPriceSnapshotHistoryRequest, opts ...grpc.CallOption) (*QueryPriceSnapshotHistoryResponse, error) {
	out := new(QueryPriceSnapshotHistoryResponse)
	err := c.cc.Invoke(ctx, "/kiichain.kiichain3.oracle.Query/PriceSnapshotHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Twaps(ctx context.Context, in *QueryTwapsRequest, opts ...grpc.CallOption) (*QueryTwapsResponse, error) {
	out := new(QueryTwapsResponse)
	err := c.cc.Invoke(ctx, "/kiichain.kiichain3.oracle.Query/Twaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeederDelegation(ctx context.Context, in *QueryFeederDelegationRequest, opts ...grpc.CallOption) (*QueryFeederDelegationResponse, error) {
	out := new(QueryFeederDelegationResponse)
	err := c.cc.Invoke(ctx, "/kiichain.kiichain3.oracle.Query/FeederDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VotePenaltyCounter(ctx context.Context, in *QueryVotePenaltyCounterRequest, opts ...grpc.CallOption) (*QueryVotePenaltyCounterResponse, error) {
	out := new(QueryVotePenaltyCounterResponse)
	err := c.cc.Invoke(ctx, "/kiichain.kiichain3.oracle.Query/VotePenaltyCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SlashWindow(ctx context.Context, in *QuerySlashWindowRequest, opts ...grpc.CallOption) (*QuerySlashWindowResponse, error) {
	out := new(QuerySlashWindowResponse)
	err := c.cc.Invoke(ctx, "/kiichain.kiichain3.oracle.Query/SlashWindow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/kiichain.kiichain3.oracle.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ExchangeRate returns exchange rate of a specific denom
	ExchangeRate(context.Context, *QueryExchangeRateRequest) (*QueryExchangeRateResponse, error)
	// ExchangeRates returns the exchange rate for all denoms
	ExchangeRates(context.Context, *QueryExchangeRatesRequest) (*QueryExchangeRatesResponse, error)
	// Actives returns all actives denoms on the module's KVStore
	Actives(context.Context, *QueryActivesRequest) (*QueryActivesResponse, error)
	// VoteTargets returns all vote targets denoms
	VoteTargets(context.Context, *QueryVoteTargetsRequest) (*QueryVoteTargetsResponse, error)
	// PriceSnapshotHistory returns the history of price snapshots for all assets
	PriceSnapshotHistory(context.Context, *QueryPriceSnapshotHistoryRequest) (*QueryPriceSnapshotHistoryResponse, error)
	// Twap = Time-weighted average price
	// Twaps returns the list of the average price over an specific period of time and denom
	Twaps(context.Context, *QueryTwapsRequest) (*QueryTwapsResponse, error)
	// FeederDelegation returns the delegator by the validator address
	FeederDelegation(context.Context, *QueryFeederDelegationRequest) (*QueryFeederDelegationResponse, error)
	// VotePenaltyCounter returns the voting behavior by an specific validator
	VotePenaltyCounter(context.Context, *QueryVotePenaltyCounterRequest) (*QueryVotePenaltyCounterResponse, error)
	// SlashWindow returns slash window informacion
	SlashWindow(context.Context, *QuerySlashWindowRequest) (*QuerySlashWindowResponse, error)
	// Params returns the Oracle module's params
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ExchangeRate(ctx context.Context, req *QueryExchangeRateRequest) (*QueryExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeRate not implemented")
}
func (*UnimplementedQueryServer) ExchangeRates(ctx context.Context, req *QueryExchangeRatesRequest) (*QueryExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeRates not implemented")
}
func (*UnimplementedQueryServer) Actives(ctx context.Context, req *QueryActivesRequest) (*QueryActivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Actives not implemented")
}
func (*UnimplementedQueryServer) VoteTargets(ctx context.Context, req *QueryVoteTargetsRequest) (*QueryVoteTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTargets not implemented")
}
func (*UnimplementedQueryServer) PriceSnapshotHistory(ctx context.Context, req *QueryPriceSnapshotHistoryRequest) (*QueryPriceSnapshotHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceSnapshotHistory not implemented")
}
func (*UnimplementedQueryServer) Twaps(ctx context.Context, req *QueryTwapsRequest) (*QueryTwapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Twaps not implemented")
}
func (*UnimplementedQueryServer) FeederDelegation(ctx context.Context, req *QueryFeederDelegationRequest) (*QueryFeederDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeederDelegation not implemented")
}
func (*UnimplementedQueryServer) VotePenaltyCounter(ctx context.Context, req *QueryVotePenaltyCounterRequest) (*QueryVotePenaltyCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePenaltyCounter not implemented")
}
func (*UnimplementedQueryServer) SlashWindow(ctx context.Context, req *QuerySlashWindowRequest) (*QuerySlashWindowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlashWindow not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kiichain.kiichain3.oracle.Query/ExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeRate(ctx, req.(*QueryExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kiichain.kiichain3.oracle.Query/ExchangeRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeRates(ctx, req.(*QueryExchangeRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Actives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Actives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kiichain.kiichain3.oracle.Query/Actives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Actives(ctx, req.(*QueryActivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVoteTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kiichain.kiichain3.oracle.Query/VoteTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteTargets(ctx, req.(*QueryVoteTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceSnapshotHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPriceSnapshotHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceSnapshotHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kiichain.kiichain3.oracle.Query/PriceSnapshotHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceSnapshotHistory(ctx, req.(*QueryPriceSnapshotHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Twaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTwapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Twaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kiichain.kiichain3.oracle.Query/Twaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Twaps(ctx, req.(*QueryTwapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeederDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeederDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeederDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kiichain.kiichain3.oracle.Query/FeederDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeederDelegation(ctx, req.(*QueryFeederDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VotePenaltyCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVotePenaltyCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VotePenaltyCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kiichain.kiichain3.oracle.Query/VotePenaltyCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VotePenaltyCounter(ctx, req.(*QueryVotePenaltyCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SlashWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySlashWindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SlashWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kiichain.kiichain3.oracle.Query/SlashWindow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SlashWindow(ctx, req.(*QuerySlashWindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kiichain.kiichain3.oracle.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kiichain.kiichain3.oracle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangeRate",
			Handler:    _Query_ExchangeRate_Handler,
		},
		{
			MethodName: "ExchangeRates",
			Handler:    _Query_ExchangeRates_Handler,
		},
		{
			MethodName: "Actives",
			Handler:    _Query_Actives_Handler,
		},
		{
			MethodName: "VoteTargets",
			Handler:    _Query_VoteTargets_Handler,
		},
		{
			MethodName: "PriceSnapshotHistory",
			Handler:    _Query_PriceSnapshotHistory_Handler,
		},
		{
			MethodName: "Twaps",
			Handler:    _Query_Twaps_Handler,
		},
		{
			MethodName: "FeederDelegation",
			Handler:    _Query_FeederDelegation_Handler,
		},
		{
			MethodName: "VotePenaltyCounter",
			Handler:    _Query_VotePenaltyCounter_Handler,
		},
		{
			MethodName: "SlashWindow",
			Handler:    _Query_SlashWindow_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oracle/query.proto",
}

func (m *QueryExchangeRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExchangeRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OracleExchangeRate != nil {
		{
			size, err := m.OracleExchangeRate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExchangeRatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryExchangeRatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomOracleExchangeRate) > 0 {
		for iNdEx := len(m.DenomOracleExchangeRate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DenomOracleExchangeRate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryActivesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActivesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActivesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryActivesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActivesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActivesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Actives) > 0 {
		for iNdEx := len(m.Actives) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Actives[iNdEx])
			copy(dAtA[i:], m.Actives[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Actives[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DenomOracleExchangeRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomOracleExchangeRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomOracleExchangeRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OracleExchangeRate != nil {
		{
			size, err := m.OracleExchangeRate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVoteTargetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoteTargetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoteTargetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryVoteTargetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoteTargetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoteTargetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoteTargets) > 0 {
		for iNdEx := len(m.VoteTargets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VoteTargets[iNdEx])
			copy(dAtA[i:], m.VoteTargets[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.VoteTargets[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPriceSnapshotHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPriceSnapshotHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPriceSnapshotHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPriceSnapshotHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPriceSnapshotHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPriceSnapshotHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceSnapshot) > 0 {
		for iNdEx := len(m.PriceSnapshot) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceSnapshot[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTwapsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTwapsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTwapsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LookbackSeconds != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LookbackSeconds))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTwapsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTwapsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTwapsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OracleTwap) > 0 {
		for iNdEx := len(m.OracleTwap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OracleTwap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeederDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeederDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeederDelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeederDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeederDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeederDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeedAddr) > 0 {
		i -= len(m.FeedAddr)
		copy(dAtA[i:], m.FeedAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeedAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVotePenaltyCounterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVotePenaltyCounterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVotePenaltyCounterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVotePenaltyCounterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVotePenaltyCounterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVotePenaltyCounterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VotePenaltyCounter != nil {
		{
			size, err := m.VotePenaltyCounter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySlashWindowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySlashWindowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySlashWindowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySlashWindowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySlashWindowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySlashWindowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WindowProgress != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.WindowProgress))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryExchangeRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExchangeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OracleExchangeRate != nil {
		l = m.OracleExchangeRate.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExchangeRatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryExchangeRatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DenomOracleExchangeRate) > 0 {
		for _, e := range m.DenomOracleExchangeRate {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryActivesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryActivesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actives) > 0 {
		for _, s := range m.Actives {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *DenomOracleExchangeRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OracleExchangeRate != nil {
		l = m.OracleExchangeRate.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVoteTargetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryVoteTargetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VoteTargets) > 0 {
		for _, s := range m.VoteTargets {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPriceSnapshotHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPriceSnapshotHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriceSnapshot) > 0 {
		for _, e := range m.PriceSnapshot {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTwapsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LookbackSeconds != 0 {
		n += 1 + sovQuery(uint64(m.LookbackSeconds))
	}
	return n
}

func (m *QueryTwapsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OracleTwap) > 0 {
		for _, e := range m.OracleTwap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFeederDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeederDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVotePenaltyCounterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVotePenaltyCounterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotePenaltyCounter != nil {
		l = m.VotePenaltyCounter.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySlashWindowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySlashWindowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WindowProgress != 0 {
		n += 1 + sovQuery(uint64(m.WindowProgress))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryExchangeRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleExchangeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OracleExchangeRate == nil {
				m.OracleExchangeRate = &OracleExchangeRate{}
			}
			if err := m.OracleExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeRatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeRatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomOracleExchangeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomOracleExchangeRate = append(m.DenomOracleExchangeRate, DenomOracleExchangeRate{})
			if err := m.DenomOracleExchangeRate[len(m.DenomOracleExchangeRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActivesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActivesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActivesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActivesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActivesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActivesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actives", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actives = append(m.Actives, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomOracleExchangeRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomOracleExchangeRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomOracleExchangeRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleExchangeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OracleExchangeRate == nil {
				m.OracleExchangeRate = &OracleExchangeRate{}
			}
			if err := m.OracleExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoteTargetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoteTargetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoteTargetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoteTargetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoteTargetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoteTargetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteTargets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteTargets = append(m.VoteTargets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPriceSnapshotHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPriceSnapshotHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPriceSnapshotHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPriceSnapshotHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPriceSnapshotHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPriceSnapshotHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceSnapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceSnapshot = append(m.PriceSnapshot, PriceSnapshot{})
			if err := m.PriceSnapshot[len(m.PriceSnapshot)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTwapsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTwapsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTwapsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookbackSeconds", wireType)
			}
			m.LookbackSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LookbackSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTwapsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTwapsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTwapsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleTwap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleTwap = append(m.OracleTwap, OracleTwap{})
			if err := m.OracleTwap[len(m.OracleTwap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeederDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeederDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeederDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeederDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeederDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeederDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVotePenaltyCounterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVotePenaltyCounterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVotePenaltyCounterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVotePenaltyCounterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVotePenaltyCounterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVotePenaltyCounterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePenaltyCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VotePenaltyCounter == nil {
				m.VotePenaltyCounter = &VotePenaltyCounter{}
			}
			if err := m.VotePenaltyCounter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySlashWindowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySlashWindowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySlashWindowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySlashWindowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySlashWindowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySlashWindowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowProgress", wireType)
			}
			m.WindowProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WindowProgress |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
